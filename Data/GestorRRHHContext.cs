// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using WebApplication1.Models;

namespace WebApplication1.Data
{
    public partial class GestorRRHHContext : DbContext
    {
        public GestorRRHHContext()
        {
        }

        public GestorRRHHContext(DbContextOptions<GestorRRHHContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Catalog> Catalog { get; set; }
        public virtual DbSet<CatalogDetail> CatalogDetail { get; set; }
        public virtual DbSet<CertificateRequest> CertificateRequest { get; set; }
        public virtual DbSet<Company> Company { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Option> Option { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<RoleOption> RoleOption { get; set; }
        public virtual DbSet<SalaryAdvance> SalaryAdvance { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserCompany> UserCompany { get; set; }
        public virtual DbSet<UserPasswordHistory> UserPasswordHistory { get; set; }
        public virtual DbSet<UserPwdReset> UserPwdReset { get; set; }
        public virtual DbSet<Vacation> Vacation { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. See http://go.microsoft.com/fwlink/?LinkId=723263 for guidance on storing connection strings.
                optionsBuilder.UseSqlServer("Data Source=.;Initial Catalog=GestorRRHH;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Catalog>(entity =>
            {
                entity.HasIndex(e => e.catalogCode)
                    .HasName("IX_Catalog")
                    .IsUnique();

                entity.Property(e => e.ID).HasComment("ID general del servicio");

                entity.Property(e => e.catalogCode)
                    .IsUnicode(false)
                    .HasComment("Catalog code. Is unique");

                entity.Property(e => e.catalogName)
                    .IsUnicode(false)
                    .HasComment("Catalog name for front end");
            });

            modelBuilder.Entity<CatalogDetail>(entity =>
            {
                entity.Property(e => e.catalogID).HasComment("The catalog belong to");

                entity.Property(e => e.enabled).HasComment("Enabled or not");

                entity.Property(e => e.valueDescription)
                    .IsUnicode(false)
                    .HasComment("Description for the front end");

                entity.Property(e => e.valueDetail)
                    .IsUnicode(false)
                    .HasComment("Value of the item");

                entity.HasOne(d => d.catalog)
                    .WithMany(p => p.CatalogDetail)
                    .HasForeignKey(d => d.catalogID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CatalogDetail_Catalog");
            });

            modelBuilder.Entity<CertificateRequest>(entity =>
            {
                entity.Property(e => e.create_who).IsUnicode(false);

                entity.Property(e => e.employeeCode).IsUnicode(false);

                entity.Property(e => e.update_who).IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.CertificateRequest)
                    .HasForeignKey(d => new { d.companyID, d.employeeCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CertificateRequest_Employee");
            });

            modelBuilder.Entity<Company>(entity =>
            {
                entity.HasIndex(e => e.companyCode)
                    .HasName("IX_Company")
                    .IsUnique();

                entity.Property(e => e.companyID).ValueGeneratedNever();

                entity.Property(e => e.companyCode).IsUnicode(false);

                entity.Property(e => e.companyName).IsUnicode(false);
            });

            modelBuilder.Entity<Employee>(entity =>
            {
                entity.HasKey(e => new { e.companyID, e.employeeCode })
                    .HasName("PK_Employee_1");

                entity.Property(e => e.employeeCode).IsUnicode(false);

                entity.Property(e => e.employeeADDR).IsUnicode(false);

                entity.Property(e => e.employeeBACAcct).IsUnicode(false);

                entity.Property(e => e.employeeBT).IsUnicode(false);

                entity.Property(e => e.employeeCP).IsUnicode(false);

                entity.Property(e => e.employeeCT).IsUnicode(false);

                entity.Property(e => e.employeeCY).IsUnicode(false);

                entity.Property(e => e.employeeCollegeDegree).IsUnicode(false);

                entity.Property(e => e.employeeDACT).IsUnicode(false);

                entity.Property(e => e.employeeDAMSG).IsUnicode(false);

                entity.Property(e => e.employeeDAMX).IsUnicode(false);

                entity.Property(e => e.employeeDANOP).IsUnicode(false);

                entity.Property(e => e.employeeEM).IsUnicode(false);

                entity.Property(e => e.employeeET).IsUnicode(false);

                entity.Property(e => e.employeeFN).IsUnicode(false);

                entity.Property(e => e.employeeGender).IsUnicode(false);

                entity.Property(e => e.employeeHS).IsUnicode(false);

                entity.Property(e => e.employeeHT).IsUnicode(false);

                entity.Property(e => e.employeeIDNo).IsUnicode(false);

                entity.Property(e => e.employeeIDT).IsUnicode(false);

                entity.Property(e => e.employeeJOBJJY).IsUnicode(false);

                entity.Property(e => e.employeeJOBTi).IsUnicode(false);

                entity.Property(e => e.employeeLanguage).IsUnicode(false);

                entity.Property(e => e.employeeLastName).IsUnicode(false);

                entity.Property(e => e.employeeLastName2).IsUnicode(false);

                entity.Property(e => e.employeeLocalLanguage).IsUnicode(false);

                entity.Property(e => e.employeeMN).IsUnicode(false);

                entity.Property(e => e.employeeMS).IsUnicode(false);

                entity.Property(e => e.employeeNIT).IsUnicode(false);

                entity.Property(e => e.employeeName).IsUnicode(false);

                entity.Property(e => e.employeePRO).IsUnicode(false);

                entity.Property(e => e.employeeSOSHospital).IsUnicode(false);

                entity.Property(e => e.employeeSOSName).IsUnicode(false);

                entity.Property(e => e.employeeSOSPMD).IsUnicode(false);

                entity.Property(e => e.employeeSOSPhone).IsUnicode(false);

                entity.Property(e => e.employeeSOSWho).IsUnicode(false);

                entity.Property(e => e.employeeSSN).IsUnicode(false);

                entity.Property(e => e.employeeTW).IsUnicode(false);

                entity.Property(e => e.record_affected_who).IsUnicode(false);

                entity.Property(e => e.record_created_who).IsUnicode(false);

                entity.HasOne(d => d.company)
                    .WithMany(p => p.Employee)
                    .HasForeignKey(d => d.companyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Employee_Company");
            });

            modelBuilder.Entity<Option>(entity =>
            {
                entity.HasIndex(e => e.optionCode)
                    .HasName("IX_Options")
                    .IsUnique();

                entity.Property(e => e.optionCode).IsUnicode(false);

                entity.Property(e => e.optionName).IsUnicode(false);

                entity.Property(e => e.optionRoute).IsUnicode(false);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.roleName).IsUnicode(false);
            });

            modelBuilder.Entity<RoleOption>(entity =>
            {
                entity.HasKey(e => new { e.idRole, e.idOption });

                entity.HasOne(d => d.idOptionNavigation)
                    .WithMany(p => p.RoleOption)
                    .HasForeignKey(d => d.idOption)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoleOption_Options");

                entity.HasOne(d => d.idRoleNavigation)
                    .WithMany(p => p.RoleOption)
                    .HasForeignKey(d => d.idRole)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_RoleOption_Role");
            });

            modelBuilder.Entity<SalaryAdvance>(entity =>
            {
                entity.Property(e => e.create_who).IsUnicode(false);

                entity.Property(e => e.employeeCode).IsUnicode(false);

                entity.Property(e => e.update_who).IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.SalaryAdvance)
                    .HasForeignKey(d => new { d.companyID, d.employeeCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_SalaryAdvance_Employee");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.userName).IsUnicode(false);

                entity.Property(e => e.NoT).HasComment("Numero de intentos");

                entity.Property(e => e.cellPhone).IsUnicode(false);

                entity.Property(e => e.email).IsUnicode(false);

                entity.Property(e => e.firstName).IsUnicode(false);

                entity.Property(e => e.lastName).IsUnicode(false);

                entity.Property(e => e.lastName2).IsUnicode(false);

                entity.Property(e => e.middleName).IsUnicode(false);

                entity.HasOne(d => d.userRoleNavigation)
                    .WithMany(p => p.User)
                    .HasForeignKey(d => d.userRole)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_User_Role");
            });

            modelBuilder.Entity<UserCompany>(entity =>
            {
                entity.HasKey(e => new { e.userName, e.companyID });

                entity.Property(e => e.userName).IsUnicode(false);

                entity.Property(e => e.record_affected_who).IsUnicode(false);

                entity.Property(e => e.record_created_who).IsUnicode(false);

                entity.HasOne(d => d.company)
                    .WithMany(p => p.UserCompany)
                    .HasForeignKey(d => d.companyID)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserCompany_Company");

                entity.HasOne(d => d.userNameNavigation)
                    .WithMany(p => p.UserCompany)
                    .HasForeignKey(d => d.userName)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserCompany_User");
            });

            modelBuilder.Entity<UserPasswordHistory>(entity =>
            {
                entity.Property(e => e.userName).IsUnicode(false);
            });

            modelBuilder.Entity<UserPwdReset>(entity =>
            {
                entity.Property(e => e.userName)
                    .IsUnicode(false)
                    .HasComment("Usuario que solicita");

                entity.Property(e => e.OTP)
                    .IsUnicode(false)
                    .HasComment("One time password para confirmar");

                entity.Property(e => e.dateRequested).HasComment("fecha solicitada");

                entity.Property(e => e.emailSended)
                    .IsUnicode(false)
                    .HasComment("A qué correo fue enviado");

                entity.Property(e => e.validUntil).HasComment("Fecha máxima válida");
            });

            modelBuilder.Entity<Vacation>(entity =>
            {
                entity.Property(e => e.comments).IsUnicode(false);

                entity.Property(e => e.create_who).IsUnicode(false);

                entity.Property(e => e.employeeCode).IsUnicode(false);

                entity.Property(e => e.update_who).IsUnicode(false);

                entity.HasOne(d => d.Employee)
                    .WithMany(p => p.Vacation)
                    .HasForeignKey(d => new { d.companyID, d.employeeCode })
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Vacation_Employee");
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}